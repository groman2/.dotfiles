[include]
    path = ~/.gitconfig.local
[include]
    path = ~/.gitconfig.merge
[init]
    templatedir = ~/.dotfiles/git_template
[status]
    submodulesummary = true
[push]
    default = simple
[http]
    sslVerify = true
[rerere]
    enabled = true
[color]
    ui = auto
[alias]
    co = checkout
    lol = log --oneline --decorate --graph
    pfj = "!bash -c \"for I in $*; do git push -f \\$I $(git rev-parse --abbrev-ref HEAD) & done; wait\""
    moostash = "!git-moostash.sh"
    da = difftool -y --dir-diff
    df = difftool -y
    #dc = "!bash -c \"diff --unified=1 --label $1 <(git log $1 | git-ls-changes hash=no num=no) --label $2 <(git log $2 | git-ls-changes hash=no num=no)\" -"
    #dc = "!bash -c \"diff --unified=1 --label $1 <(git log $1 | git-ls-changes hash=no num=no id=yes) --label $2 <(git log $2 | git-ls-changes hash=no num=no id=yes)\" -"
    dc = "!bash -c \"echo \\# +++ missing from $1;\
                     echo \\# --- missing from $2;\
                     echo;\
                     awk 'NR==FNR{c[\\$1]++;next};c[\\$1] == 0 { print \\\"+\\\",\\$0; }' <(git log $1 | git-ls-changes hash=no num=no id=yes) <(git log $2 | git-ls-changes hash=no num=no id=yes);\
                     echo;\
                     awk 'NR==FNR{c[\\$1]++;next};c[\\$1] == 0 { print \\\"-\\\",\\$0; }' <(git log $2 | git-ls-changes hash=no num=no id=yes) <(git log $1 | git-ls-changes hash=no num=no id=yes)\""
    #gdc = "!bash -c \"meld --label=$1 <(git log $1 | git-ls-changes hash=no num=no) --label=$2 <(git log $2 | git-ls-changes hash=no num=no)\" -"
    gdc = "!bash -c \"meld --label=$1 <(git log $1 | git-ls-changes hash=no num=no id=yes) --label=$2 <(git log $2 | git-ls-changes hash=no num=no id=yes)\" -"
    su = "!f() { git rev-parse --show-toplevel ; }; cd `f`; git submodule update --init --recursive"
    sur = "!f() { git rev-parse --show-toplevel ; }; cd `f`; git submodule foreach 'git su'; git remote update; git submodule update --init --recursive"
    su-force = "!f() { git rev-parse --show-toplevel ; }; cd `f`; git submodule foreach 'git su-force'; git remote update; git submodule update --init --recursive --force"
    remote-branches = "!bash -c \"git branch -a | grep remotes | cut -d '/' -f 2-\""
    fix = "!bash -c \"b() { git rev-parse --abbrev-ref --symbolic-full-name @{u} || echo origin/master ; }; git rebase -i --autosquash `b`\""
